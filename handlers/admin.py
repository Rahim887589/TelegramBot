from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from admin_storage import load_admins, save_admins  # —Ñ–∞–π–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

from faq_mongo import (
    get_all_faq, get_all_categories, get_faq_by_category,
    add_category, rename_category, delete_category,
    add_question, edit_answer, delete_question
)

router = Router()
ADMIN_IDS = load_admins()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class AdminMenu(StatesGroup):
    menu = State()
    add_submenu = State()
    edit_submenu = State()
    delete_submenu = State()
    admin_management = State()

class AddCategory(StatesGroup):
    waiting_name = State()

class AddFAQ(StatesGroup):
    waiting_category = State()
    waiting_question = State()
    waiting_answer = State()

class EditCategory(StatesGroup):
    waiting_category = State()
    waiting_new_name = State()

class EditFAQ(StatesGroup):
    waiting_category = State()
    waiting_question = State()
    waiting_new_answer = State()

class EditQuestion(StatesGroup):
    waiting_category = State()
    waiting_old_question = State()
    waiting_new_question = State()

class DeleteCategory(StatesGroup):
    waiting_confirm = State()
    waiting_category = State()

class DeleteFAQ(StatesGroup):
    waiting_category = State()
    waiting_question = State()
    waiting_confirm = State()

class AdminManagement(StatesGroup):
    menu = State()
    add_admin = State()
    delete_admin = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_admin_main_menu_kb():
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_add_submenu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è")],
            [KeyboardButton(text="‚ûï –í–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_edit_submenu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è")],
            [KeyboardButton(text="‚úèÔ∏è –í–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_delete_submenu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è")],
            [KeyboardButton(text="üóë –í–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_admin_management_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

async def get_categories_kb(back_button=True):
    cats = await get_all_categories()
    buttons = [[KeyboardButton(text=cat)] for cat in sorted(cats)]
    if back_button:
        buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def get_questions_kb(category, back_button=True):
    questions = await get_faq_by_category(category)
    buttons = [[KeyboardButton(text=q)] for q in sorted(questions.keys())]
    if back_button:
        buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirm_delete_kb():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_yes"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_delete_no")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

@router.message(Command("admin"))
async def admin_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    faq = await get_all_faq()
    text = "üìã <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
    if not faq:
        text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
    else:
        text += "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
        for cat in sorted(faq.keys()):
            q_count = len(faq[cat])
            text += f"‚Ä¢ {cat} ({q_count} –≤–æ–ø—Ä–æ—Å–æ–≤)\n"

    await message.answer(text, parse_mode="HTML", reply_markup=get_admin_main_menu_kb())
    await state.set_state(AdminMenu.menu)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

@router.message(AdminMenu.menu, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def menu_add(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=get_add_submenu_kb())
    await state.set_state(AdminMenu.add_submenu)

@router.message(AdminMenu.menu, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def menu_edit(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=get_edit_submenu_kb())
    await state.set_state(AdminMenu.edit_submenu)

@router.message(AdminMenu.menu, F.text == "üóë –£–¥–∞–ª–∏—Ç—å")
async def menu_delete(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=get_delete_submenu_kb())
    await state.set_state(AdminMenu.delete_submenu)

@router.message(AdminMenu.menu, F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def menu_admin_management(message: types.Message, state: FSMContext):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏:", reply_markup=get_admin_management_kb())
    await state.set_state(AdminMenu.admin_management)

@router.message(AdminMenu.menu, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def menu_back(message: types.Message, state: FSMContext):
    await message.answer("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AdminMenu.add_submenu, F.text == "‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def add_category_start(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddCategory.waiting_name)

@router.message(AddCategory.waiting_name)
async def add_category_process(message: types.Message, state: FSMContext):
    category = message.text.strip()
    if not category:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    success = await add_category(category)
    if not success:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —Å–æ–∑–¥–∞–Ω–∞", reply_markup=get_admin_main_menu_kb())
    await state.set_state(AdminMenu.menu)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(AdminMenu.add_submenu, F.text == "‚ûï –í–æ–ø—Ä–æ—Å")
async def add_faq_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=get_add_submenu_kb())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_categories_kb())
    await state.set_state(AddFAQ.waiting_category)

@router.message(AddFAQ.waiting_category)
async def add_faq_category(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddFAQ.waiting_question)

@router.message(AddFAQ.waiting_question)
async def add_faq_question(message: types.Message, state: FSMContext):
    question = message.text.strip()
    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    data = await state.get_data()
    category = data["category"]
    questions = await get_faq_by_category(category)
    if question in questions:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    await state.update_data(question=question)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    await state.set_state(AddFAQ.waiting_answer)

@router.message(AddFAQ.waiting_answer)
async def add_faq_answer(message: types.Message, state: FSMContext):
    answer = message.text.strip()
    if not answer:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    data = await state.get_data()
    category = data["category"]
    question = data["question"]
    success = await add_question(category, question, answer)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        return
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{category}':\n\n<b>{question}</b>\n{answer}",
        parse_mode="HTML",
        reply_markup=get_admin_main_menu_kb()
    )
    await state.set_state(AdminMenu.menu)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AdminMenu.edit_submenu, F.text == "‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def edit_category_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=await get_categories_kb())
    await state.set_state(EditCategory.waiting_category)

@router.message(EditCategory.waiting_category)
async def edit_category_name(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditCategory.waiting_new_name)

@router.message(EditCategory.waiting_new_name)
async def edit_category_name_process(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    data = await state.get_data()
    old_name = data["category"]
    success = await rename_category(old_name, new_name)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'", reply_markup=get_admin_main_menu_kb())
    await state.set_state(AdminMenu.menu)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(AdminMenu.edit_submenu, F.text == "‚úèÔ∏è –í–æ–ø—Ä–æ—Å")
async def edit_question_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_categories_kb())
    await state.set_state(EditQuestion.waiting_category)

@router.message(EditQuestion.waiting_category)
async def edit_question_category(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=await get_questions_kb(message.text))
    await state.set_state(EditQuestion.waiting_old_question)

@router.message(EditQuestion.waiting_old_question)
async def edit_question_old(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    questions = await get_faq_by_category(category)
    if message.text not in questions:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(old_question=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditQuestion.waiting_new_question)

@router.message(EditQuestion.waiting_new_question)
async def edit_question_new(message: types.Message, state: FSMContext):
    new_q = message.text.strip()
    if not new_q:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    data = await state.get_data()
    category = data["category"]
    old_question = data["old_question"]
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    faq = await get_faq_by_category(category)
    if new_q in faq:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    answer = faq.get(old_question)
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    await delete_question(category, old_question)
    await add_question(category, new_q, answer)

    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω—ë–Ω:\n\n<b>{old_question}</b> ‚û°Ô∏è <b>{new_q}</b>",
        parse_mode="HTML",
        reply_markup=get_admin_main_menu_kb()
    )
    await state.set_state(AdminMenu.menu)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
@router.message(AdminMenu.edit_submenu, F.text == "‚úèÔ∏è –û—Ç–≤–µ—Ç")
async def edit_faq_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_categories_kb())
    await state.set_state(EditFAQ.waiting_category)

@router.message(EditFAQ.waiting_category)
async def edit_faq_category(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=await get_questions_kb(message.text))
    await state.set_state(EditFAQ.waiting_question)

@router.message(EditFAQ.waiting_question)
async def edit_faq_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    questions = await get_faq_by_category(category)
    if message.text not in questions:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(question=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditFAQ.waiting_new_answer)

@router.message(EditFAQ.waiting_new_answer)
async def edit_faq_answer_process(message: types.Message, state: FSMContext):
    new_answer = message.text.strip()
    if not new_answer:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    data = await state.get_data()
    category = data["category"]
    question = data["question"]
    success = await edit_answer(category, question, new_answer)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        return
    await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è:\n\n<b>{question}</b>\n\n<b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç:</b>\n{new_answer}",
        parse_mode="HTML",
        reply_markup=get_admin_main_menu_kb()
    )
    await state.set_state(AdminMenu.menu)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AdminMenu.delete_submenu, F.text == "üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def delete_category_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=await get_categories_kb())
    await state.set_state(DeleteCategory.waiting_category)

@router.message(DeleteCategory.waiting_category)
async def delete_category_confirm(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{message.text}':", reply_markup=get_confirm_delete_kb())
    await state.set_state(DeleteCategory.waiting_confirm)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(AdminMenu.delete_submenu, F.text == "üóë –í–æ–ø—Ä–æ—Å")
async def delete_faq_start(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if not cats:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_categories_kb())
    await state.set_state(DeleteFAQ.waiting_category)

@router.message(DeleteFAQ.waiting_category)
async def delete_faq_category(message: types.Message, state: FSMContext):
    cats = await get_all_categories()
    if message.text not in cats:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=await get_questions_kb(message.text))
    await state.set_state(DeleteFAQ.waiting_question)

@router.message(DeleteFAQ.waiting_question)
async def delete_faq_confirm(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    questions = await get_faq_by_category(category)
    if message.text not in questions:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(question=message.text)
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ '{message.text}':", reply_markup=get_confirm_delete_kb())
    await state.set_state(DeleteFAQ.waiting_confirm)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è ---
@router.callback_query(F.data.startswith("confirm_delete_"))
async def handle_confirm_delete(call: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    await call.answer()

    if current_state == "DeleteCategory:waiting_confirm":
        category = data.get("category")
        if call.data == "confirm_delete_yes":
            success = await delete_category(category)
            if success:
                await call.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        else:
            await call.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()

    elif current_state == "DeleteFAQ:waiting_confirm":
        category = data.get("category")
        question = data.get("question")
        if call.data == "confirm_delete_yes":
            success = await delete_question(category, question)
            if success:
                await call.message.edit_text(f"‚úÖ –í–æ–ø—Ä–æ—Å '{question}' —É–¥–∞–ª—ë–Ω.")
            else:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        else:
            await call.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()

    else:
        await call.message.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ ---
@router.message(AdminMenu.admin_management, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminManagement.add_admin)

@router.message(AdminManagement.add_admin)
async def add_admin_process(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    admins = load_admins()
    if user_id in admins:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return
    admins.append(user_id)
    save_admins(admins)
    global ADMIN_IDS
    ADMIN_IDS = admins
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.", reply_markup=get_admin_main_menu_kb())
    await state.set_state(AdminMenu.menu)

@router.message(AdminMenu.admin_management, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def delete_admin_start(message: types.Message, state: FSMContext):
    admins = load_admins()
    if not admins:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.", reply_markup=get_admin_main_menu_kb())
        await state.set_state(AdminMenu.menu)
        return
    admins_str = "\n".join(str(admin) for admin in admins)
    await message.answer(f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:\n{admins_str}\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminManagement.delete_admin)

@router.message(AdminManagement.delete_admin)
async def delete_admin_process(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    admins = load_admins()
    if user_id not in admins:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
        return
    admins.remove(user_id)
    save_admins(admins)
    global ADMIN_IDS
    ADMIN_IDS = admins
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.", reply_markup=get_admin_main_menu_kb())
    await state.set_state(AdminMenu.menu)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None or current_state == AdminMenu.menu.state:
        await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_admin_main_menu_kb())
    else:
        await state.clear()
        await admin_menu(message, state)